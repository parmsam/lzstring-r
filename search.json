[{"path":"https://parmsam.github.io/lzstring-r/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 lzstring authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://parmsam.github.io/lzstring-r/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sam Parmar. Maintainer.","code":""},{"path":"https://parmsam.github.io/lzstring-r/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parmar S (2024). lzstring: R wrapper lzstring C++ library. R package version 0.1.0, https://parmsam.github.io/lzstring-r/.","code":"@Manual{,   title = {lzstring: An R wrapper of lzstring C++ library},   author = {Sam Parmar},   year = {2024},   note = {R package version 0.1.0},   url = {https://parmsam.github.io/lzstring-r/}, }"},{"path":"https://parmsam.github.io/lzstring-r/index.html","id":"lzstring","dir":"","previous_headings":"","what":"An R wrapper of lzstring C++ library","title":"An R wrapper of lzstring C++ library","text":"goal lzstring-r provide R wrapper lzstring C++ library. lzstring originally JavaScript library provides fast efficient string compression decompression using LZ-based algorithm. Credit goes Winston Chang spotting missing R package guiding R Shinylive repo—check awesome contributions repo based . Also, shoutout Andy Kras implementation C++ lzstring, can find right , pieroxy, original brain behind lzstring JavaScript—peek work .","code":""},{"path":"https://parmsam.github.io/lzstring-r/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R wrapper of lzstring C++ library","text":"can install development version lzstringr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"parmsam/lzstring-r\")"},{"path":"https://parmsam.github.io/lzstring-r/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"An R wrapper of lzstring C++ library","text":"basic example shows solve common problem:","code":"library(lzstring)  # text data message = \"The quick brown fox jumps over the lazy dog!\";  compressed = lzstring::compressToBase64(message) compressed #> [1] \"CoCwpgBAjgrglgYwNYQEYCcD2B3AdhAM0wA8IArGAWwAcBnCTANzHQgBdwIAbAQwC8AnhAAmmAOYBCIA\"  decompressed = lzstring::decompressFromBase64(compressed) decompressed #> [1] \"The quick brown fox jumps over the lazy dog!\""},{"path":"https://parmsam.github.io/lzstring-r/index.html","id":"json-data","dir":"","previous_headings":"Example","what":"JSON data","title":"An R wrapper of lzstring C++ library","text":"","code":"# JSON data json_data <- list(name = \"John Doe\", age = 30, email = \"john.doe@example.com\") json_string <- jsonlite::toJSON(json_data)  compressed = lzstring::compressToBase64(json_string) compressed #> [1] \"N4IgdghgtgpiBcBtEApA9gCzAAgCJrgF0AaECAcziQGYAGEkGKCASwBsFkArTMAOgAmBAAIwAHtAAObGHwDGaKCEIBfIA===\"  decompressed = lzstring::decompressFromBase64(compressed) decompressed #> [1] \"{\\\"name\\\":[\\\"John Doe\\\"],\\\"age\\\":[30],\\\"email\\\":[\\\"john.doe@example.com\\\"]}\" identical(json_string, decompressed) #> [1] FALSE"},{"path":"https://parmsam.github.io/lzstring-r/index.html","id":"js-code","dir":"","previous_headings":"Example","what":"JS code","title":"An R wrapper of lzstring C++ library","text":"","code":"js_code <- \"function test() { console.log('Hello, World!'); }\" compressed = lzstring::compressToBase64(js_code) compressed #> [1] \"GYVwdgxgLglg9mABFApgZygCgJSIN6IQJpwA2KAdKXAOaYDkAEiqdQDSIDqcATqQCYBCetgDciAL5A==\"  decompressed = lzstring::decompressFromBase64(compressed) decompressed #> [1] \"function test() { console.log('Hello, World!'); }\""},{"path":"https://parmsam.github.io/lzstring-r/index.html","id":"r-code","dir":"","previous_headings":"Example","what":"R code","title":"An R wrapper of lzstring C++ library","text":"","code":"r_code <- ' library(dplyr)  data <- data.frame(   name = c(\"John\", \"Jane\", \"Jake\"),   age = c(28, 22, 32),   salary = c(50000, 60000, 55000) )  # Filter data for age greater than 25 filtered_data <- filter(data, age > 25)  # Add a new column with updated salary data <- mutate(data, updated_salary = salary * 1.05) ' compressed = lzstring::compressToBase64(r_code) compressed #> [1] \"FAGwlgRgTghlCeAKAJgBxPKBKYxkwBcYACAHgFpj8iA6AM1gFsBTRYY4gOxheIF5iAY0QAiAFIB7ABacRAGmLiYnZvMViYAa1VY57YjADmzfkMQAmABwLz5hQGZzu/QGcYIOPFPCArAAYAvwUANkCg4h9/AJwcYABiYgAxMBACZigqQhI6CQyjE0MoZkJ04gIpZWJzH2A6FLSi5AB9ahIKYjrU9JQshXziAD4qn1iEgEFkZAMuZgB3IQkQAFdGTmJZsHLiJdRqZim3DwQ8LLJKRiWiNJ6iBR295sPPUyeEYgAqYgBGGj8R4CAA==\" decompose = lzstring::decompressFromBase64(compressed) cat(decompose) #>  #> library(dplyr) #>  #> data <- data.frame( #>   name = c(\"John\", \"Jane\", \"Jake\"), #>   age = c(28, 22, 32), #>   salary = c(50000, 60000, 55000) #> ) #>  #> # Filter data for age greater than 25 #> filtered_data <- filter(data, age > 25) #>  #> # Add a new column with updated salary #> data <- mutate(data, updated_salary = salary * 1.05)"},{"path":"https://parmsam.github.io/lzstring-r/index.html","id":"decompress-shinylive-hashes","dir":"","previous_headings":"Example","what":"Decompress Shinylive Hashes","title":"An R wrapper of lzstring C++ library","text":"","code":"x <- lzstring::decompressFromEncodedURIComponent(\"NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKAZwAtaJWAlAB0IdJiw71OY4RBEBiAAQAROADM+cRQFUAkorVFGitKkWluUUooAmzAO6cTi3p1JEA5sxiKAtP98RAFdaRQAeX0VUKA84AH1OWhs4ehZ2ERFFRSUAQXRzWlJqLQDAiCzSQuLFAF5FITAACThqaiJFAGVefgBCBtwM8uzOpJSWKKgIFoMjRT5UINInUszFROTU4zr1scZ0uSGspV0IBdJETrpk40NjCy0IIJh6OGMiNUV6PmWA1azpUaME5nfZZMFzU6LXQ2Wr1MBfCCcfp-MHUKAvaiwhoAOSeLzeHwRnEQyMOYJgfFhAEYBmSsjAoAAPWEAVgADLTwVkAG5QahBLR1ADMbJRsiyAlpqyUAHlFmcLo1aG5PN4-L8hqg2qQ5aQQUR5VCYXUGjZlaQAArahqyWQKFTqTRrV7c16KNoeWgERSMOAARxCvph7lsDmcrncXlg6v8Ik4LrdEQMQQgBEqJHY80WuEUBr1iwEihAgyOiiVKqjPne5m4Whl1BhADEoIVuGogpiAOJwVjx4zKKxQGNlUv2Vs+-0CtxwGGPZ5u6tE6WKAAqrkUcEZqF9nESJBrVkUsSmzHITiHEdV0eVinszHQM4hzgIfOoy5Dvog1ytRGsIb4ZovuQB7nNKy5Uhgii6NYN4NL6UBprQroNCYX41q86hGFoPAGg2nxaFAixEAylQvq0rDLmCvq+JucAEIsj72LW5RZksiiZpCpAACREoWBCWBAsTLgATJB0FOHmZzmKwqBaDeQ5ar+qySYsXFmm4P7WEmn7ftq7DFmSzJJmoLYWO21BcfYpl8B4KJEuEkTxn67AUhA7CMpKigMoy7mecUgkWBgeawqxPHfIoADUihUnaZIRqCXKMpyXJMHAUAANZOHURLJeCxCYiaYDyAA7CyOQ5MoABCpJcp8RjXFiYBMYUcA1YlaL0I1ADq1mCQU8DmO0UyMtYrxBKg6blBxXnfMIeAovSLblIV5aRmq1ZWYUNn9XASJgGKqwAL6yIdgxKAAwvBwFdHwrAmPkKyIt0rB5Kg7AhLCIQ5n2rpbM6jC-bIYCHQAukAA\") y <- jsonlite::fromJSON(x) cat(y$name) #> app.R cat(y$content) #> library(shiny) #> library(bslib) #>  #> # Define UI for app that draws a histogram ---- #> ui <- page_sidebar( #>  #>   # App title ---- #>   title = \"Hello Shiny!\", #>  #>   # Sidebar panel for inputs ---- #>   sidebar = sidebar( #>  #>     # Input: Slider for the number of bins ---- #>     sliderInput( #>       inputId = \"bins\", #>       label = \"Number of bins:\", #>       min = 1, #>       max = 50, #>       value = 30 #>     ) #>   ), #>  #>   # Output: Histogram ---- #>   plotOutput(outputId = \"distPlot\") #> ) #>  #> # Define server logic required to draw a histogram ---- #> server <- function(input, output) { #>  #>   # Histogram of the Old Faithful Geyser Data ---- #>   # with requested number of bins #>   # This expression that generates a histogram is wrapped in a call #>   # to renderPlot to indicate that: #>   # #>   # 1. It is \"reactive\" and therefore should be automatically #>   #    re-executed when inputs (input$bins) change #>   # 2. Its output type is a plot #>   output$distPlot <- renderPlot({ #>     x <- faithful$waiting #>     bins <- seq(min(x), max(x), length.out = input$bins + 1) #>  #>     hist( #>       x, #>       breaks = bins, #>       col = \"#75AADB\", #>       border = \"white\", #>       xlab = \"Waiting time to next eruption (in mins)\", #>       main = \"Histogram of waiting times\" #>     ) #>   }) #> } #>  #> # Create Shiny app ---- #> shinyApp(ui = ui, server = server) x <- lzstring::decompressFromEncodedURIComponent(\"NobwRAdghgtgpmAXGKAHVA6VBPMAaMAYwHsIAXOcpMAMwCdiYACAZwAsBLCbDOAD1R04LFkw4xUxOmTERUAVzJ4mQiABM4dZfI4AdCPp0YuCsgH0WAGw4a6ACl2RHyxwDlnTAAzKAjJ+9MAEyeAJT64RAAAqq2GBR8ZPoaNExkCXYhiPpMOSpwZPJ0EEw0jhAAVIFioiAmihgQGUzlQQC+jvpgrQC6QA\") y <- jsonlite::fromJSON(x) cat(y$name) #> app.py cat(y$content) #> from shiny.express import input, render, ui #>  #> ui.input_slider(\"n\", \"N\", 0, 100, 20) #>  #>  #> @render.text #> def txt(): #>     return f\"n*2 is {input.n() * 2}\""},{"path":"https://parmsam.github.io/lzstring-r/reference/compressToBase64.html","id":null,"dir":"Reference","previous_headings":"","what":"Compress a string to Base64 — compressToBase64","title":"Compress a string to Base64 — compressToBase64","text":"function takes string input returns compressed version string Base64 format.","code":""},{"path":"https://parmsam.github.io/lzstring-r/reference/compressToBase64.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compress a string to Base64 — compressToBase64","text":"","code":"compressToBase64(string)"},{"path":"https://parmsam.github.io/lzstring-r/reference/compressToBase64.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compress a string to Base64 — compressToBase64","text":"string character string compressed.","code":""},{"path":"https://parmsam.github.io/lzstring-r/reference/compressToBase64.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compress a string to Base64 — compressToBase64","text":"character string representing compressed input string Base64 format.","code":""},{"path":"https://parmsam.github.io/lzstring-r/reference/compressToBase64.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compress a string to Base64 — compressToBase64","text":"","code":"if (FALSE) { compressToBase64(\"Hello, world!\") }"},{"path":"https://parmsam.github.io/lzstring-r/reference/compressToEncodedURIComponent.html","id":null,"dir":"Reference","previous_headings":"","what":"Compress a string to Encoded URI Component — compressToEncodedURIComponent","title":"Compress a string to Encoded URI Component — compressToEncodedURIComponent","text":"function takes string input returns compressed version string Encoded URI Component format.","code":""},{"path":"https://parmsam.github.io/lzstring-r/reference/compressToEncodedURIComponent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compress a string to Encoded URI Component — compressToEncodedURIComponent","text":"","code":"compressToEncodedURIComponent(string)"},{"path":"https://parmsam.github.io/lzstring-r/reference/compressToEncodedURIComponent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compress a string to Encoded URI Component — compressToEncodedURIComponent","text":"string character string compressed.","code":""},{"path":"https://parmsam.github.io/lzstring-r/reference/compressToEncodedURIComponent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compress a string to Encoded URI Component — compressToEncodedURIComponent","text":"character string representing compressed input string Encoded URI Component format.","code":""},{"path":"https://parmsam.github.io/lzstring-r/reference/compressToEncodedURIComponent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compress a string to Encoded URI Component — compressToEncodedURIComponent","text":"","code":"if (FALSE) { compressToEncodedURIComponent(\"Hello, world!\") }"},{"path":"https://parmsam.github.io/lzstring-r/reference/decompressFromBase64.html","id":null,"dir":"Reference","previous_headings":"","what":"Decompress a string from Base64 — decompressFromBase64","title":"Decompress a string from Base64 — decompressFromBase64","text":"function takes compressed string Base64 format input returns decompressed version string.","code":""},{"path":"https://parmsam.github.io/lzstring-r/reference/decompressFromBase64.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decompress a string from Base64 — decompressFromBase64","text":"","code":"decompressFromBase64(string)"},{"path":"https://parmsam.github.io/lzstring-r/reference/decompressFromBase64.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decompress a string from Base64 — decompressFromBase64","text":"string character string Base64 format decompressed.","code":""},{"path":"https://parmsam.github.io/lzstring-r/reference/decompressFromBase64.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decompress a string from Base64 — decompressFromBase64","text":"character string representing decompressed input string.","code":""},{"path":"https://parmsam.github.io/lzstring-r/reference/decompressFromBase64.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decompress a string from Base64 — decompressFromBase64","text":"","code":"if (FALSE) { decompressFromBase64(compressed_string) }"},{"path":"https://parmsam.github.io/lzstring-r/reference/decompressFromEncodedURIComponent.html","id":null,"dir":"Reference","previous_headings":"","what":"Decompress a string from Encoded URI Component — decompressFromEncodedURIComponent","title":"Decompress a string from Encoded URI Component — decompressFromEncodedURIComponent","text":"function takes compressed string Encoded URI Component format input returns decompressed version string.","code":""},{"path":"https://parmsam.github.io/lzstring-r/reference/decompressFromEncodedURIComponent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decompress a string from Encoded URI Component — decompressFromEncodedURIComponent","text":"","code":"decompressFromEncodedURIComponent(string)"},{"path":"https://parmsam.github.io/lzstring-r/reference/decompressFromEncodedURIComponent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decompress a string from Encoded URI Component — decompressFromEncodedURIComponent","text":"string character string Encoded URI Component format decompressed.","code":""},{"path":"https://parmsam.github.io/lzstring-r/reference/decompressFromEncodedURIComponent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decompress a string from Encoded URI Component — decompressFromEncodedURIComponent","text":"character string representing decompressed input string.","code":""},{"path":"https://parmsam.github.io/lzstring-r/reference/decompressFromEncodedURIComponent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decompress a string from Encoded URI Component — decompressFromEncodedURIComponent","text":"","code":"if (FALSE) { decompressFromEncodedURIComponent(compressed_string) }"}]
